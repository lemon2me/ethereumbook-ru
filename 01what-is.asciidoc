[role="pagenumrestart"]
[[whatis_chapter]]
== Что такое Ethereum?

((("Ethereum (generally)","about", id="ix_01 what-is-asciidoc0", range="startofrange")))Ethereum ((("world computer, Ethereum as"))) часто описывается как "мировой компьютер". Но что это значит? Давайте начнем с описания, ориентированного на компьютерную науку, а затем попытаемся расшифровать его с помощью более практического анализа возможностей и характеристик Ethereum, сравнивая его с Биткоином и другими децентрализованными платформами обмена информацией (или сокращенно "блокчейнами").

С точки зрения информатики, Ethereum - это детерминированный, но практически неограниченный конечный автомат, состоящий из глобально доступного единого состояния и виртуальной машины, которая применяет изменения к этому состоянию.

С более практической точки зрения, Ethereum - это глобальная децентрализованная вычислительная инфраструктура с открытым исходным кодом, которая выполняет программы, называемые _смарт-контрактами_ (_smart contracts_). Она использует блокчейн для синхронизации и хранения изменений состояния системы, а также криптовалюту под названием _эфир_ (_ether_) для измерения и ограничения затрат ресурсов на выполнение смарт-контрактов.

Платформа Ethereum позволяет разработчикам создавать мощные децентрализованные приложения со встроенными экономическими функциями. Обеспечивая высокую доступность, проверяемость, прозрачность и нейтральность, она также снижает или устраняет цензуру и снижает определенные риски для контрагентов.

[[bitcoin_comparison]]
=== По сравнению с Биткоином

((("Bitcoin","Ethereum compared to")))((("Ethereum (generally)","Bitcoin compared to")))Многие люди придут в Ethereum с некоторым предыдущим опытом работы с криптовалютами, в частности с Биткоином. Ethereum имеет много общих элементов с другими открытыми блокчейнами: одноранговая сеть, соединяющая участников, Византийский отказоустойчивый алгоритм консенсуса для синхронизации обновлений состояния (подтверждение работы блокчейна – proof-of-work), использование криптографических примитивов, таких как цифровые подписи и хэши, и цифровой валюты (эфир).

И всё же во многих отношениях, таких как назначение и конструкция, Ethereum разительно отличается от тех открытых блокчейнов, которые ему предшествовали, включая Биткойн.

((("Ethereum (generally)","purpose of")))Целью Ethereum в первую очередь не является платежная сеть в цифровой валюте. ((("utility currency, ether as")))В то время как цифровая валюта ether является неотъемлемой частью и необходимой для работы Ethereum, эфир предназначен в качестве _полезной валюты_ для оплаты использования платформы Ethereum в качестве мирового компьютера.

В отличие от Биткойна, который имеет очень ограниченный язык сценариев, Ethereum разработан как программируемый блокчейн общего назначения, который запускает _виртуальную машину_, способную выполнять код произвольной и неограниченной сложности. Там, где язык сценариев Биткойна намеренно ограничен простой оценкой условий расходов "true / false", язык Ethereum является _полным по Тьюрингу_, что означает, что Ethereum может функционировать как компьютер общего назначения.

[[blockchain_components]]
=== Компоненты блокчейна

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))Компонентами открытого, публичного блокчейна являются (обычно):

* Одноранговая сеть (P2P), соединяющая участников и распространяющая транзакции и блоки подтверждённых транзакций на основе стандартизированного "gossip" pass:[<span class="keep-together">протокола</span>]
* Сообщения в форме транзакций, представляющие переходы состояний
* Набор согласованных правил, определяющих, что представляет собой транзакция и что обеспечивает валидный переход состояния.
* Конечный автомат, который обрабатывает транзакции в соответствии с правилами консенсуса
* Цепочка криптографически защищенных блоков, которая действует как журнал всех проверенных и одобренных переходов состояний
* Алгоритм консенсуса, который децентрализует контроль над блокчейном, заставляя участников сотрудничать для обеспечения соблюдений правил консенсуса.
* Теоретически обоснованная игровая схема стимулирования (например, затраты на подтверждение работы плюс вознаграждение за блок) для экономической защиты машины состояний в открытой pass:[<span class="keep-together">среде</span>]
* Одна или несколько реализаций (вышеуказанных правил) программного обеспечения с открытым исходным кодом ("клиенты")

Все или большинство из этих компонентов обычно объединяются в одном программном клиенте. Например, в ((("Bitcoin Core")))((("bitcoind client")))Bitcoin эталонная реализация разработана проектом _Bitcoin Core_ с открытым исходным кодом и реализована как _bitcoind_ клиент. В Ethereum вместо эталонной реализации есть ((("reference specification")))_reference specification_, математическое описание системы в Yellow Paper (см. <<references>>). Существует ряд клиентов, которые построены в соответствии с эталонной спецификацией.

В прошлом мы использовали термин "блокчейн" для обозначения всех только что перечисленных компонентов в качестве сокращенной ссылки на комбинацию технологий, которые охватывают все описанные характеристики. Однако сегодня существует огромное разнообразие блокчейнов с различными свойствами. Нам нужны определения, которые помогут нам понять характеристики рассматриваемого блокчейна, такие как _открытый, публичный, глобальный, децентрализованный, нейтральный,_ и _устойчивый к цензуре_, чтобы определить важные характеристики системы "блокчейн", которые предоставляют эти компоненты.

Не все блокчейны созданы равными. Когда кто-то говорит вам, что что-то является блокчейном, вы не получили ответа что это; скорее, вам нужно начать задавать много вопросов, чтобы уточнить, что они имеют в виду, когда используют слово "блокчейн". Начните с запроса описания компонентов в предыдущем списке, затем спросите, обладает ли этот "блокчейн" характеристиками _открытости, общедоступности_ и т.д.

[[ethereum_birth]]
=== Рождение Эфириума

((("Ethereum (generally)","birth of")))Все великие инновации решают реальные проблемы, и Ethereum не исключение. Ethereum был задуман в то время, когда люди осознали мощь модели Биткойна и пытались выйти за рамки приложений для криптовалют. Но разработчики столкнулись с головоломкой: им нужно было либо строить поверх Биткоина, либо запускать новый блокчейн. ((("Bitcoin","limitations of")))Опираться на Биткойн означало жить в рамках преднамеренных ограничений сети и пытаться найти обходные пути. Ограниченные набор типов транзакций, набор типов данных и размеры хранилища данных, казалось, ограничивал виды приложений, которые могли работать непосредственно на биткойне; что-то другое требовало дополнительных уровней вне цепочки, и это сразу же сводило на нет многие преимущества использования общедоступного блокчейна. Для проектов, которым требовалось больше свободы и гибкости, оставаясь при этом в блокчейне, новый блокчейн был единственным вариантом. Но это означало много работы: создание всех элементов инфраструктуры, тщательное тестирование и т.д.

((("Buterin, Vitalik","and birth of Ethereum")))Ближе к концу 2013 года Виталик Бутерин, молодой программист и биткоин-энтузиаст, начал задумываться о дальнейшем расширении возможностей Биткоина и Mastercoin (протокол наложения, который расширил Биткоин, предложив элементарные смарт-контракты). В октябре того же года Виталик предложил более общий подход к команде Mastercoin, который позволил гибким и скриптовым (но не полным по Тьюрингу) контрактам заменить специализированный язык контрактов Mastercoin. Хотя команда Mastercoin была впечатлена, это предложение было слишком радикальным изменением, чтобы вписаться в их дорожную карту развития.

В декабре 2013 года Виталик начал делиться техническим документом, в котором излагалась идея Ethereum: блокчейн общего назначения, полный по Тьюрингу. Несколько десятков человек увидели этот ранний проект и высказали свои мнения, помогая Виталику доработать проект.

Оба автора этой книги получили ранний вариант технического документа и прокомментировали его. Андреас M. Antonopoulos был заинтригован этой идеей и задал Виталику много вопросов об использовании отдельного блокчейна для обеспечения соблюдения согласованных правил исполнения смарт-контрактов и о последствиях языка, полного по Тьюрингу. Андреас продолжал с большим интересом следить за прогрессом Ethereum, но находился на ранних стадиях написания своей книги _Mastering Bitcoin_ и не принимал непосредственного участия в Ethereum до позднего времени. ((("Wood, Dr. Gavin","and birth of Ethereum")))Доктор Гэвин Wood, однако, был одним из первых, кто обратился к Виталику и предложил помочь имея навыки программирования на C++. Гэвин стал соучредителем Ethereum, разработчиком кода и техническим директором.

Как рассказывает Виталик в своем http://bit.ly/2T2t6zs["Ethereum Prehistory" post]: 

____
Это было время, когда протокол Ethereum был полностью моим собственным творением. Однако с этого момента к нам начали присоединяться новые участники. Безусловно, самым выдающимся специалистом по протоколу был Гэвин Wood...

Гэвину также можно в значительной степени приписать деликатное изменение видения: от рассмотрения Ethereum как платформы для создания программируемых денег с контрактами на основе блокчейна, которые могут хранить цифровые активы и передавать их в соответствии с заранее установленными правилами, к вычислительной платформе общего назначения. Это началось с незначительных изменений в акцентах и терминологии, а позже это влияние усилилось с увеличением акцента на “Web 3”, который рассматривал Ethereum как одну часть набора децентрализованных технологий. Две другие - Whisper и Swarm.
____

Начиная с декабря 2013 года, Виталик и Гэвин усовершенствовали и развили эту идею, вместе создав протокол, который стал Ethereum.

Основатели Ethereum думали о блокчейне без определенной цели, который мог бы поддерживать широкий спектр приложений, будучи _программируемым_. Идея заключалась в том, что, используя блокчейн общего назначения, такой как Ethereum, разработчик мог программировать свое конкретное приложение без необходимости внедрять базовые механизмы одноранговых сетей, блокчейнов, алгоритмов консенсуса и т.д. Платформа Ethereum была разработана для того, чтобы абстрагировать эти детали и обеспечить детерминированную и безопасную среду программирования для децентрализованных блокчейн-приложений.

Подобно Сатоши, Виталик и Гэвин не просто изобрели новую технологию; они по-новому объединили новые изобретения с существующими технологиями и представили прототип кода, чтобы доказать свои идеи миру.

Основатели работали в течение многих лет, создавая и совершенствуя концепцию. А 30 июля 2015 года был добыт первый блок Ethereum. Мировой компьютер начал служить миру.

[ПРИМЕЧАНИЕ]
====
Статья Виталика Бутерина "Предыстория Ethereum" была опубликована в сентябре 2017 года и представляет собой увлекательный взгляд от первого лица на самые ранние моменты существования Ethereum.

Вы можете прочитать его по адресу
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== Четыре этапа развития Ethereum

((("Ethereum (generally)","four stages of development")))Разработка Ethereum планировалась в четыре отдельных этапа, на каждом из которых происходили серьезные изменения. ((("hard forks", seealso="DAO; other specific hard forks, e.g.: Spurious Dragon")))Этап может включать в себя субрелизы, известные как "хардфорки", которые изменяют функциональность таким образом, который не является обратно совместимым.

Четыре основных этапа развития имеют кодовые названия _Frontier_, _Homestead_, _Metropolis_ и _Serenity_. Промежуточные хардфорки, которые произошли на сегодняшний день, имеют кодовые названия _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_, _Constantinople/St. Petersburg_, _Istanbul_ и _Muir Glacier_. Как этапы разработки, так и промежуточные хардфорки показаны на следующей временной шкале, которая "датирована" номером блока:


Block #0:: ((("Frontier")))__Frontier__ &#x2014; Начальный этап Ethereum, длящийся с 30 июля 2015 года по март 2016 года.

Block #200,000:: ((("Ice Age")))__Ice Age__ &#x2014; Хардфорк для экспоненциального увеличения сложности, чтобы мотивировать переход на PoS, когда он будет готов.

Block #1,150,000:: ((("Homestead")))__Homestead__ &#x2014; Вторая стадия Ethereum, запущенная в марте 2016 года.

Block #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__ &#x2014; Хард-форк, который возместил ущерб жертвам взломанного DAO контракта и привел к разделению на две конкурирующие системы: Ethereum и Ethereum Classic.

Block #2,463,000:: ((("Tangerine Whistle")))__Tangerine Whistle__ &#x2014; Хардфорк для изменения расчета газа для определенных операций ввода-вывода и очистки накопленного состояния от атаки типа "Отказ в обслуживании" (DoS), которая использовала низкую стоимость газа для этих операций.

Block #2,675,000:: ((("Spurious Dragon")))__Spurious Dragon__ &#x2014; Хардфорк для устранения большего количества векторов DoS-атак и еще одна очистка состояния. Кроме того, механизм защиты от повторных атак.

Block #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Byzantium__ &#x2014; Metropolis - это третья стадия Ethereum. Запущенный в октябре 2017 года, Byzantium является первой частью Metropolis, добавляющей низкоуровневые функции и регулирующей вознаграждение за блок и сложность.

Block #7,280,000:: ((("Constantinople fork")))((("St. Petersburg fork")))__Constantinople / St. Petersburg__ &#x2014; Константинополь планировался как вторая часть Метрополии с аналогичными улучшениями. За несколько часов до его активации, была обнаружена https://bit.ly/2Ast7rz[критическая ошибка]. Поэтому хардфорк был отложен и переименован в Санкт-Петербург.

Block #9,069,000:: ((("Istanbul fork")))__Istanbul__ &#x2014; Дополнительный хард-форк с тем же подходом и соглашением об именовании, что и для двух предыдущих.

Block #9,200,000:: ((("Muir Glacier fork")))__Muir Glacier__ &#x2014; Хардфорк, единственной целью которого было снова скорректировать сложность из-за экспоненциального увеличения, представленного в "Ice Age".

((("Serenity")))((("Ethereum 2.0")))Также было объявлено о двух хардфорках, Berlin и London, и сейчас мы находимся на заключительной стадии разработки Ethereum под кодовым названием Serenity. Serenity предполагает глубокую реорганизацию инфраструктуры, которая сделает Ethereum более масштабируемым, более безопасным и более устойчивым. Она представлена как вторая версия Ethereum, "Ethereum 2.0".


[[general_purpose_blockchain]]
=== Ethereum: Блокчейн общего назначения

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))Оригинальный блокчейн, а именно блокчейн Биткойна, отслеживает состояние единиц биткойна и их владение. ((("distributed state machine, Ethereum as")))Вы можете думать о Биткойне как о распределенном консенсусном _конечном автомате_ (_state machine_), где транзакции вызывают глобальное _изменение состояния_ (_state transition_), изменяя право собственности на монеты. Переходы между состояниями ограничены правилами консенсуса, что позволяет всем участникам (в конечном итоге) прийти к общему (консенсусному) состоянию системы после того, как будет добыто несколько блоков.

Ethereum также является распределенным конечным автоматом. Но вместо того, чтобы отслеживать только состояние владения валютой, ((("key-value tuple")))Ethereum отслеживает переходы состояний хранилища данных общего назначения, т.е. хранилища, которое может содержать любые данные вида _ключ-значение_ (_key–value tuple_). Хранилище данных ключ–значение содержит произвольные значения, на каждое из которых ссылается некоторый ключ; например, значение "Освоение Эфириума", на которое ссылается ключ "Название книги". В некотором смысле это служит той же цели, что и модель хранения данных в _памяти с произвольным доступом_ (_RAM_), используемая большинством компьютеров общего назначения. У Ethereum есть память, в которой хранятся как код, так и данные, и он использует блокчейн Ethereum для отслеживания того, как эта память меняется с течением времени. Подобно компьютеру с сохраненной программой общего назначения, Ethereum может загружать код в свой конечный автомат и запускать этот код, сохраняя результирующие изменения состояния в свой блокчейн. Два критических отличия от большинства компьютеров общего назначения заключаются в том, что изменения состояния Ethereum регулируются правилами консенсуса, а состояние распределяется по всему миру. Ethereum отвечает на вопрос: "Что, если бы мы могли отслеживать любое произвольное состояние и программировать конечный автомат для создания всемирного компьютера, работающего на основе консенсуса?"

[[ethereum_components]]
=== Компоненты Ethereum

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))Рассмотрим компоненты блокчейн-системы в Ethereum (<<blockchain_components>>) более подробно:


Сеть P2P:: Ethereum работает в _основной сети Ethereum_ (_Ethereum main network_), которая может быть адресована через TCP-порт 30303, и использует протокол под названием _ÐΞVp2p_.

Согласованные правила:: Правила консенсуса Ethereum определены в справочной спецификации – Yellow Paper (см. <<references>>).

Транзакции:: Транзакции Ethereum - это сетевые сообщения, которые включают (помимо прочего) отправителя, получателя, значение и полезные данные.

[role="pagebreak-before"]
Конечный автомат:: Переходы состояний Ethereum обрабатываются _Ethereum Virtual Machine_ (EVM), виртуальной машиной на основе стека, которая выполняет _bytecode_ (инструкции машинного языка). Программы EVM, называемые "смарт-контрактами", написаны на языках высокого уровня (например, Solidity) и скомпилированы в байт-код для выполнения на EVM.

Структуры данных:: Состояние Ethereum хранится локально на каждом узле в виде _базы данных_ (обычно LevelDB от Google), которая содержит транзакции и состояние системы в сериализованной хэшированной структуре данных, называемой _Merkle Patricia Tree_.

Алгоритм консенсуса:: Ethereum использует консенсусную модель Биткойна – Консенсус Накамото, которая использует последовательные блоки с одной подписью, взвешенные по важности по proof-of-work (PoW), для определения самой длинной цепочки и, следовательно, текущего состояния. Однако в ближайшем будущем планируется перейти на PoS-взвешенную (proof-of-stake) систему голосования под кодовым названием _Casper_.

Экономическая безопасность:: В настоящее время Ethereum использует алгоритм PoW под названием _Thrash_, но в конечном итоге он будет отменен с переходом на PoS в какой-то момент в будущем.

Клиенты:: Ethereum имеет несколько совместимых реализаций клиентского программного обеспечения, наиболее известными из которых являются _Go-Ethereum_ (_Geth_) и _Parity_.

[[references]]
==== Дальнейшее чтение

Следующие ссылки содержат дополнительную информацию об упомянутых здесь технологиях:

* Ethereum Yellow Paper:
https://ethereum.github.io/yellowpaper/paper.pdf

* Beige Paper - переписанный вариант Yellow Paper для более широкой аудитории на менее формальном языке.:
https://github.com/chronaeon/beigepaper

* ÐΞVP2P сетевой протокол:
https://github.com/ethereum/devp2p/blob/master/rlpx.md

* Список ресурсов виртуальной машины Ethereum:
https://eth.wiki/en/concepts/evm/ethereum-virtual-machine-(evm)-awesome-list

* База данных LevelDB (чаще всего используется для хранения локальной копии блокчейна):
https://github.com/google/leveldb

* Деревья Merkle Patricia:
https://eth.wiki/en/fundamentals/patricia-tree

* Алгоритм Ethash PoW:
https://eth.wiki/en/concepts/ethash/ethash

* Руководство по внедрению Casper PoS v1:
http://bit.ly/2DyPr3l

* Go-клиент Ethereum (Geth):
https://geth.ethereum.org/

* Клиент Parity Ethereum:
https://parity.io/

[[turing_completeness]]
=== Ethereum и полнота по Тьюрингу

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))Как только вы начнете читать об Ethereum, вы сразу же столкнетесь с термином "Тьюринг-полный". Говорят, что Эфириум, в отличие от Биткоина, является полным по Тьюрингу. Что именно это значит?

((("Turing, Alan")))Этот термин относится к английскому математику Алану Тьюрингу, который считается отцом информатики. В 1936 году он создал математическую модель компьютера, состоящего из конечного автомата, который манипулирует символами, считывая и записывая их в последовательную память (напоминающую бумажную ленту бесконечной длины). С помощью этой конструкции Тьюринг предложил математическую основу для ответа (отрицательного) на вопросы об _универсальной вычислимости_, то есть о том, разрешимы ли все проблемы. Он доказал, что существуют классы задач, которые не поддаются вычислению. ((("halting problem")))В частности, он доказал, что _проблема остановки_ (возможно ли, взяв произвольную программу и ее входные данные, определить, прекратит ли программа в конечном итоге выполнение) не разрешима.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Алан Тьюринг далее определил систему как _Тьюринг-полную_, если ее можно использовать для имитации любой машины Тьюринга. Такая система называется _универсальной машиной Тьюринга_ (UTM).

Способность Ethereum выполнять сохраненную программу в конечном автомате, называемом виртуальной машиной Ethereum, одновременно считывая и записывая данные в память, делает его Тьюринг-полной системой и, следовательно, UTM. Ethereum может вычислить любой алгоритм, который может быть вычислен любой машиной Тьюринга, учитывая ограничения конечной памяти.

Инновация Ethereum заключается в объединении вычислительной архитектуры компьютера общего назначения с хранимыми программами и децентрализованного блокчейна, создавая тем самым распределенный мировой компьютер с единым для всех состоянием. Программы Ethereum работают "везде", но при этом создают общее состояние, которое защищено правилами pass:[<span class="keep-together">консенсуса</span>].

[[turing_completeness_feature]]
==== Полнота Тьюринга как "Особенность"

((("Turing completeness","as feature")))Услышав, что Ethereum полный по Тьюрингу, вы можете прийти к выводу, что это _особенность_, которой каким-то образом не хватает в системе, которая является неполной по Тьюрингу. Скорее, все наоборот. Полноты по Тьюрингу достичь очень легко; на самом деле, http://bit.ly/2ABft33[простейший известный конечный Тьюринг-полный автомат] имеет 4 состояния и использует 6 символов, а определение состояния составляет всего 22 инструкции. Действительно, иногда системы оказываются "случайно полными по Тьюрингу". Интересный справочник по таким системам можно найти по адресу http://bit.ly/2Og1VgX[].

Однако, полнота по Тьюрингу очень опасна, особенно в системах открытого доступа, таких как публичные блокчейны, из-за проблемы остановки, которую мы затронули ранее. Например, современные принтеры являются полными по Тьюрингу, и им могут быть предоставлены файлы для печати, которые переводят их в замороженное состояние. Тот факт, что Ethereum является полным по Тьюрингу, означает, что любая программа любой сложности может быть вычислена с помощью Ethereum. Но такая гибкость порождает некоторые острые проблемы с безопасностью и управлением ресурсами. Не отвечающий на запросы принтер можно выключить и снова включить. Это невозможно с публичным блокчейном.

[[turing_completeness_implications]]
==== Последствия полноты Тьюринга

((("Turing completeness","implications of")))Тьюринг доказал, что вы не можете предсказать, завершится ли программа, смоделировав ее на компьютере. Проще говоря, мы не можем предсказать путь программы, не запустив ее. ((("infinite loops")))Системы, полные по Тьюрингу, могут выполняться в "бесконечных циклах", термин, используемый (в упрощении) для описания программ, которые не завершаются. Тривиально создать программу, которая запускает цикл, который никогда не заканчивается. Но непреднамеренные бесконечные циклы могут возникать без предупреждения из-за сложных взаимодействий между начальными условиями и кодом. В Ethereum это создает проблему: каждый участвующий узел (клиент) должен проверять каждую транзакцию, выполняя любые смарт-контракты, которые он вызывает. Но, как доказал Тьюринг, Ethereum не может предсказать не запуская смарт-контракт, завершится ли его действие или как долго он будет работать (возможно, бесконечно долго). Случайно или намеренно, смарт-контракт может быть создан таким образом, чтобы он выполнялся вечно, когда узел сети попытается его проверить. По сути, это DoS-атака. И, конечно же, между программой, проверка которой занимает миллисекунду, и программой, которая выполняется вечно, находится бесконечный ряд неприятных, забивающих ресурсы, раздувающих память, перегревающих процессор программ, которые просто тратят ресурсы впустую. В мировом компьютере программа, злоупотребляющая ресурсами, получает возможность злоупотреблять мировыми ресурсами. Как Ethereum ограничивает ресурсы, используемые смарт-контрактом, если он не может заранее предсказать использование ресурсов?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))Чтобы ответить на этот вызов, Ethereum вводит механизм учета, называемый _газ_ (_gas_). Поскольку EVM выполняет смарт-контракт, он тщательно учитывает каждую инструкцию (вычисление, доступ к данным и т.д.), которая имеет заранее определенную стоимость в единицах газа. Когда транзакция запускает выполнение смарт-контракта, она должна включать то количество газа, которое равно верхнему пределу того, что может быть потреблено при выполнении смарт-контракта. EVM прекратит выполнение, если количество газа, потребляемого вычислением, превысит газ, доступный в транзакции. Газ - это механизм, который Ethereum использует для обеспечения Тьюринг-полных вычислений при ограничении ресурсов, которые может потреблять любая программа.

Следующий вопрос: "Как можно получить газ для оплаты вычислений на всемирном компьютере Ethereum?" Вы не найдете газ ни на каких биржах. ((("ether (generally)","gas and")))Он может быть приобретен только как часть транзакции и может быть куплен только с помощью эфира. Эфир должен быть отправлен вместе с транзакцией, и он должен быть явно предназначен для покупки газа, вместе с приемлемой ценой на газ. Так же, как и на заправке, цена на газ не фиксирована. Газ приобретается для транзакции, затем вычисление выполняется, и любой неиспользованный газ возвращается обратно отправителю транзакции.

[[DApp]]
=== От блокчейнов общего назначения до децентрализованных приложений (DApps)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and")))Ethereum начинался как способ создания блокчейна общего назначения, который можно было бы запрограммировать для различных целей. Но очень быстро видение Ethereum расширилось и превратилось в платформу для программирования DApps. DApps представляют собой более широкую перспективу, чем смарт-контракты. DApp - это, по крайней мере, смарт-контракт и веб-пользовательский интерфейс. В более широком смысле DApp - это веб-приложение, построенное поверх открытых, децентрализованных одноранговых инфраструктурных сервисов.

Приложение DApp состоит, по крайней мере, из:

- Смарт-контракты на блокчейне
- Пользовательский веб-интерфейса

Кроме того, многие DApps включают в себя другие децентрализованные компоненты, такие как:

- Децентрализованный протокол и платформу хранения данных (P2P)
- Децентрализованный (P2P) протокол обмена сообщениями и платформу

[СОВЕТ]
====
Вы можете увидеть, что DApps пишется как _&#208;Apps_. Символ &#208; - это латинский символ под названием "ETH", намекающий на Ethereum. Чтобы отобразить этот символ, используйте кодовую точку Юникода +0xD0+ или, при необходимости, символ HTML +eth+ (или десятичную сущность +#208+).
====

[[evolving_WWW]]
=== Третья эпоха Интернета

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))В 2004 году появился термин "Веб 2.0", описывающий эволюцию Интернета в сторону пользовательского контента, адаптивных интерфейсов и интерактивности. Web 2.0 - это не техническая спецификация, а скорее термин, описывающий новую направленность web pass:[<span class="keep-together">приложений</span>].

Концепция DApps призвана вывести Всемирную паутину на следующую естественную эволюционную стадию, внедряя децентрализацию с помощью одноранговых протоколов в каждый аспект веб-приложения. Термин, используемый для описания этой эволюции, - _web3_, что означает третью "версию" интернета. ((("Wood, Dr. Gavin","and web3")))Впервые предложенный доктором Гэвином Вудом, web3 представляет собой новое видение и фокус для веб-приложений: от централизованного владения и управления приложениями, к приложениям, построенным на децентрализованных протоколах.

В последующих главах мы рассмотрим Ethereum web3.js (JavaScript библиотека), которая соединяет приложения JavaScript, работающие в вашем браузере, с блокчейном Ethereum. Библиотека web3.js также включает в себя интерфейс сети хранения данных P2P под названием _Swarm_ и службу обмена сообщениями P2P под названием _Whisper_. Благодаря этим трем компонентам, включенным в библиотеку JavaScript, работающую в вашем веб-браузере, разработчики получают полный набор для разработки приложений, который позволяет им создавать DApps web3.

[[development_culture]]
=== Культура разработки Ethereum

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))До сих пор мы говорили о том, как цели и технологии Ethereum отличаются от целей и технологий других блокчейнов, которые предшествовали ему, таких как Биткоин. Ethereum также имеет совершенно иную культуру разработки.

((("Bitcoin","development culture")))В Биткойне разработка руководствуется консервативными принципами: все изменения тщательно изучаются, чтобы гарантировать, что ни одна из существующих систем не будет нарушена. По большей части изменения внедряются только в том случае, если они обратно совместимы. Существующим клиентам разрешено принять участие, но они продолжат работать, даже если решат не обновляться.

((("backward compatibility, Ethereum vs. Bitcoin")))В Ethereum, для сравнения, культура развития сообщества ориентирована на будущее, а не на прошлое. (Не совсем серьезная) мантра гласит: "действуй быстро и ломай вещи". Если требуется изменение, оно внедряется, даже если это означает аннулирование предыдущих предположений, нарушение совместимости или принуждение клиентов к обновлению. Культура разработки Ethereum характеризуется быстрыми инновациями, быстрой эволюцией и готовностью внедрять перспективные улучшения, даже если это происходит за счет некоторой обратной совместимости.

Что это означает для вас как разработчика, так это то, что вы должны сохранять гибкость и быть готовыми перестраивать свою инфраструктуру по мере изменения некоторых базовых предположений. Одной из больших проблем, с которыми сталкиваются разработчики в Ethereum, является внутреннее противоречие между развертыванием кода в неизменяемой системе и платформой разработки, которая все еще развивается. Вы не можете просто "обновить" свои смарт-контракты. Вы должны быть готовы развернуть новые, перенести пользователей, приложения и средства и начать все сначала.

По иронии судьбы, это также означает, что цель создания систем с большей автономией и менее централизованным управлением все еще не полностью реализована. Автономия и децентрализация требуют немного большей стабильности платформы, чем вы, вероятно, получите в Ethereum в ближайшие несколько лет. Чтобы платформа "эволюционировала", вы должны быть готовы отказаться от своих смарт-контрактов и перезапустить их, что означает, что вы должны сохранить определенную степень контроля над ними.

Но, с положительной стороны, Ethereum движется вперед очень быстро. Существует мало возможностей для "отказа от велосипедов", выражение, которое означает задержку развития, споря о незначительных деталях, таких как то, как построить навес для велосипедов позади атомной электростанции. Если вы начнете отказываться от велосипедов, вы можете внезапно обнаружить, что, пока вы были отвлечены, остальная команда разработчиков изменила план и отказалась от велосипедов в пользу автономных судов на воздушной подушке.

В конце концов, развитие платформы Ethereum замедлится, и ее интерфейсы станут фиксированными. Но в то же время движущим принципом являются инновации. Вам лучше не отставать, потому что никто не замедлится ради вас.

[[why_learn]]
=== Зачем изучать Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Блокчейны имеют очень крутую кривую обучения, поскольку они объединяют несколько дисциплин в одной области: программирование, информационная безопасность, криптография, экономика, распределенные системы, одноранговые сети и т.д. Ethereum делает эту кривую обучения намного менее крутой, так что вы можете быстро приступить к работе. Но под поверхностью обманчиво простой среды скрывается гораздо больше. По мере того, как вы учитесь и начинаете смотреть глубже, всегда возникает еще один уровень сложности и удивления.

Ethereum - отличная платформа для изучения блокчейнов, и она создает огромное сообщество разработчиков быстрее, чем любая другая блокчейн-платформа. Больше, чем любой другой, Ethereum - это _блокчейн разработчика_, созданный разработчиками для разработчиков. Разработчик, знакомый с приложениями на JavaScript, может зайти в Ethereum и очень быстро начать создавать рабочий код. В течение первых нескольких лет существования Ethereum было обычным делом видеть футболки с объявлениями о том, что вы можете создать токен всего за пять строк кода. Конечно, это палка о двух концах. Писать код легко, но очень сложно написать хороший и безопасный код.

[[teaching_objectives]]
=== Чему вас научит эта книга

Эта книга погружается в Ethereum и исследует каждый компонент. Вы начнете с простой транзакции, проанализируете, как она работает, создадите простой контракт, улучшите его и проследите за его путешествием по системе Ethereum.

Вы узнаете не только о том, как использовать Ethereum &#x2014; как он работает &#x2014; но и о том, почему он разработан таким, какой он есть. Вы сможете понять, как работает каждая из частей, как они сочетаются друг с другом и почему.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))
